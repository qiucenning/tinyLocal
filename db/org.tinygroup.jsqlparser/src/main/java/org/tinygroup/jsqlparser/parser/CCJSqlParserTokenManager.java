/**
 *  Copyright (c) 1997-2013, tinygroup.org (luo_guo@live.cn).
 *
 *  Licensed under the GPL, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.gnu.org/licenses/gpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * --------------------------------------------------------------------------
 *  版权 (c) 1997-2013, tinygroup.org (luo_guo@live.cn).
 *
 *  本开源软件遵循 GPL 3.0 协议;
 *  如果您不遵循此协议，则不被允许使用此文件。
 *  你可以从下面的地址获取完整的协议文本
 *
 *       http://www.gnu.org/licenses/gpl.html
 */
/* CCJSqlParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. CCJSqlParserTokenManager.java */
/*
 * #%L
 * JSQLParser library
 * %%
 * Copyright (C) 2004 - 2013 JSQLParser
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation, either version 2.1 of the 
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public 
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */


package org.tinygroup.jsqlparser.parser;

/**
 * Token Manager.
 */
@SuppressWarnings("unused")
public class CCJSqlParserTokenManager implements CCJSqlParserConstants {

    /**
     * Debug output.
     */
    public java.io.PrintStream debugStream = System.out;

    /**
     * Set debug output.
     */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2) {
        switch (pos) {
            case 0:
                if ((active2 & 0x4L) != 0L)
                    return 8;
                if ((active1 & 0x400000000000L) != 0L)
                    return 1;
                if ((active2 & 0x2L) != 0L)
                    return 5;
                if ((active0 & 0xffffffffffffffe0L) != 0L || (active1 & 0x3fffffffL) != 0L) {
                    jjmatchedKind = 99;
                    return 43;
                }
                return -1;
            case 1:
                if ((active0 & 0xdfecffffffbbf000L) != 0L || (active1 & 0x3ffeff7fL) != 0L) {
                    if (jjmatchedPos != 1) {
                        jjmatchedKind = 99;
                        jjmatchedPos = 1;
                    }
                    return 43;
                }
                if ((active0 & 0x2013000000440fe0L) != 0L || (active1 & 0x10080L) != 0L)
                    return 43;
                return -1;
            case 2:
                if ((active0 & 0xfffff5ffffe00000L) != 0L || (active1 & 0x2ffdffffL) != 0L) {
                    if (jjmatchedPos != 2) {
                        jjmatchedKind = 99;
                        jjmatchedPos = 2;
                    }
                    return 43;
                }
                if ((active0 & 0xa00001ff000L) != 0L || (active1 & 0x10020000L) != 0L)
                    return 43;
                return -1;
            case 3:
                if ((active0 & 0xbfefe00000L) != 0L || (active1 & 0x900L) != 0L)
                    return 43;
                if ((active0 & 0xfffff54010000000L) != 0L || (active1 & 0x2ffff6ffL) != 0L) {
                    jjmatchedKind = 99;
                    jjmatchedPos = 3;
                    return 43;
                }
                return -1;
            case 4:
                if ((active0 & 0x7f80000000000000L) != 0L || (active1 & 0x26bff2ffL) != 0L) {
                    if (jjmatchedPos != 4) {
                        jjmatchedKind = 99;
                        jjmatchedPos = 4;
                    }
                    return 43;
                }
                if ((active0 & 0x807ff54010000000L) != 0L || (active1 & 0x9400400L) != 0L)
                    return 43;
                return -1;
            case 5:
                if ((active1 & 0x6bff0feL) != 0L) {
                    jjmatchedKind = 99;
                    jjmatchedPos = 5;
                    return 43;
                }
                if ((active0 & 0xff80000000000000L) != 0L || (active1 & 0x20000201L) != 0L)
                    return 43;
                return -1;
            case 6:
                if ((active1 & 0x2a2601eL) != 0L)
                    return 43;
                if ((active1 & 0x41d90e0L) != 0L) {
                    jjmatchedKind = 99;
                    jjmatchedPos = 6;
                    return 43;
                }
                return -1;
            case 7:
                if ((active1 & 0x1c9080L) != 0L) {
                    jjmatchedKind = 99;
                    jjmatchedPos = 7;
                    return 43;
                }
                if ((active1 & 0x4010060L) != 0L)
                    return 43;
                return -1;
            case 8:
                if ((active1 & 0xc8000L) != 0L) {
                    jjmatchedKind = 99;
                    jjmatchedPos = 8;
                    return 43;
                }
                if ((active1 & 0x101080L) != 0L)
                    return 43;
                return -1;
            case 9:
                if ((active1 & 0xc0000L) != 0L)
                    return 43;
                if ((active1 & 0x8000L) != 0L) {
                    jjmatchedKind = 99;
                    jjmatchedPos = 9;
                    return 43;
                }
                return -1;
            case 10:
                if ((active1 & 0x8000L) != 0L) {
                    jjmatchedKind = 99;
                    jjmatchedPos = 10;
                    return 43;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0, long active1, long active2) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 33:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x1880000000000000L, 0x0L);
            case 37:
                return jjStopAtPos(0, 131);
            case 38:
                return jjStopAtPos(0, 127);
            case 40:
                jjmatchedKind = 108;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000L, 0x0L);
            case 41:
                return jjStopAtPos(0, 109);
            case 42:
                return jjStopAtPos(0, 111);
            case 43:
                return jjStopAtPos(0, 128);
            case 44:
                return jjStopAtPos(0, 107);
            case 45:
                return jjStartNfaWithStates_0(0, 129, 5);
            case 46:
                return jjStartNfaWithStates_0(0, 110, 1);
            case 47:
                return jjStartNfaWithStates_0(0, 130, 8);
            case 58:
                jjmatchedKind = 138;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200L);
            case 59:
                return jjStopAtPos(0, 105);
            case 60:
                jjmatchedKind = 115;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x60000000000000L, 0x0L);
            case 61:
                return jjStopAtPos(0, 106);
            case 62:
                jjmatchedKind = 114;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000000L, 0x0L);
            case 63:
                return jjStopAtPos(0, 112);
            case 64:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L, 0x0L);
            case 94:
                return jjStopAtPos(0, 132);
            case 65:
            case 97:
                return jjMoveStringLiteralDfa1_0(0x47020L, 0x18000000L, 0x0L);
            case 66:
            case 98:
                return jjMoveStringLiteralDfa1_0(0x800000000040L, 0x10L, 0x0L);
            case 67:
            case 99:
                return jjMoveStringLiteralDfa1_0(0x100000090000000L, 0x20940100L, 0x0L);
            case 68:
            case 100:
                return jjMoveStringLiteralDfa1_0(0x80000002200080L, 0x40L, 0x0L);
            case 69:
            case 101:
                return jjMoveStringLiteralDfa1_0(0x800000400100000L, 0x2201L, 0x0L);
            case 70:
            case 102:
                return jjMoveStringLiteralDfa1_0(0x21020000000L, 0x20000L, 0x0L);
            case 71:
            case 103:
                return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L, 0x0L);
            case 72:
            case 104:
                return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L, 0x0L);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa1_0(0x2003000000400300L, 0x10080L, 0x0L);
            case 74:
            case 106:
                return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L, 0x0L);
            case 75:
            case 107:
                return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L, 0x0L);
            case 76:
            case 108:
                return jjMoveStringLiteralDfa1_0(0x4000009000000L, 0x4000L, 0x0L);
            case 77:
            case 109:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x8400L, 0x0L);
            case 78:
            case 110:
                return jjMoveStringLiteralDfa1_0(0x810000L, 0x2000004L, 0x0L);
            case 79:
            case 111:
                return jjMoveStringLiteralDfa1_0(0x418000040000c00L, 0x800L, 0x0L);
            case 80:
            case 112:
                return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x1001002L, 0x0L);
            case 82:
            case 114:
                return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x80008L, 0x0L);
            case 83:
            case 115:
                return jjMoveStringLiteralDfa1_0(0x200000800020000L, 0x4400000L, 0x0L);
            case 84:
            case 116:
                return jjMoveStringLiteralDfa1_0(0x4200080000L, 0x20L, 0x0L);
            case 85:
            case 117:
                return jjMoveStringLiteralDfa1_0(0x4000300000000000L, 0x0L, 0x0L);
            case 86:
            case 118:
                return jjMoveStringLiteralDfa1_0(0x8040008000000000L, 0x200000L, 0x0L);
            case 87:
            case 119:
                return jjMoveStringLiteralDfa1_0(0x12100000000L, 0x0L, 0x0L);
            case 88:
            case 120:
                return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L, 0x0L);
            case 123:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x9a0L);
            case 124:
                jjmatchedKind = 126;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000000L, 0x0L);
            case 125:
                return jjStopAtPos(0, 134);
            case 126:
                jjmatchedKind = 121;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000000L, 0x0L);
            default:
                return jjMoveNfa_0(7, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0, active1, active2);
            return 1;
        }
        switch (curChar) {
            case 42:
                if ((active1 & 0x400000000000000L) != 0L)
                    return jjStopAtPos(1, 122);
                break;
            case 43:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
            case 58:
                if ((active2 & 0x200L) != 0L)
                    return jjStopAtPos(1, 137);
                break;
            case 61:
                if ((active1 & 0x10000000000000L) != 0L)
                    return jjStopAtPos(1, 116);
                else if ((active1 & 0x20000000000000L) != 0L)
                    return jjStopAtPos(1, 117);
                else if ((active1 & 0x80000000000000L) != 0L)
                    return jjStopAtPos(1, 119);
                break;
            case 62:
                if ((active1 & 0x40000000000000L) != 0L)
                    return jjStopAtPos(1, 118);
                break;
            case 64:
                if ((active1 & 0x100000000000000L) != 0L)
                    return jjStopAtPos(1, 120);
                break;
            case 65:
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x9040004080000000L, active1, 0x20d104L, active2, 0L);
            case 68:
            case 100:
                if ((active2 & 0x20L) != 0L)
                    return jjStopAtPos(1, 133);
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000L, active2, 0L);
            case 69:
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0x280800008228000L, active1, 0x80018L, active2, 0L);
            case 70:
            case 102:
                return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L, active2, 0x800L);
            case 72:
            case 104:
                return jjMoveStringLiteralDfa2_0(active0, 0x10300000000L, active1, 0x100000L, active2, 0L);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa2_0(active0, 0x2404a001000000L, active1, 0x4000440L, active2, 0L);
            case 76:
            case 108:
                return jjMoveStringLiteralDfa2_0(active0, 0x400001000L, active1, 0x8000000L, active2, 0L);
            case 77:
            case 109:
                return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
            case 78:
            case 110:
                if ((active0 & 0x200L) != 0L) {
                    jjmatchedKind = 9;
                    jjmatchedPos = 1;
                } else if ((active0 & 0x800L) != 0L)
                    return jjStartNfaWithStates_0(1, 11, 43);
                return jjMoveStringLiteralDfa2_0(active0, 0x2003200000506000L, active1, 0x10080L, active2, 0L);
            case 79:
            case 111:
                if ((active0 & 0x80L) != 0L)
                    return jjStartNfaWithStates_0(1, 7, 43);
                return jjMoveStringLiteralDfa2_0(active0, 0x20804090000L, active1, 0x22860000L, active2, 0L);
            case 80:
            case 112:
                return jjMoveStringLiteralDfa2_0(active0, 0x4000000040000000L, active1, 0L, active2, 0L);
            case 82:
            case 114:
                if ((active0 & 0x400L) != 0L) {
                    jjmatchedKind = 10;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x110400032000000L, active1, 0x1000022L, active2, 0L);
            case 83:
            case 115:
                if ((active0 & 0x20L) != 0L) {
                    jjmatchedKind = 5;
                    jjmatchedPos = 1;
                } else if ((active0 & 0x100L) != 0L)
                    return jjStartNfaWithStates_0(1, 8, 43);
                return jjMoveStringLiteralDfa2_0(active0, 0x100000040000L, active1, 0x1L, active2, 0L);
            case 84:
            case 116:
                if ((active2 & 0x80L) != 0L) {
                    jjmatchedKind = 135;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000L, active2, 0x100L);
            case 85:
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0x8001000800000L, active1, 0L, active2, 0L);
            case 86:
            case 118:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L, active2, 0L);
            case 88:
            case 120:
                return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0x2200L, active2, 0L);
            case 89:
            case 121:
                if ((active0 & 0x40L) != 0L)
                    return jjStartNfaWithStates_0(1, 6, 43);
                break;
            case 124:
                if ((active1 & 0x2000000000000000L) != 0L)
                    return jjStopAtPos(1, 125);
                break;
            case 126:
                if ((active1 & 0x800000000000000L) != 0L) {
                    jjmatchedKind = 123;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
            default:
                break;
        }
        return jjStartNfa_0(0, active0, active1, active2);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
            return jjStartNfa_0(0, old0, old1, old2);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0, active1, active2);
            return 2;
        }
        switch (curChar) {
            case 41:
                if ((active1 & 0x2000000000000L) != 0L)
                    return jjStopAtPos(2, 113);
                break;
            case 42:
                if ((active1 & 0x1000000000000000L) != 0L)
                    return jjStopAtPos(2, 124);
                break;
            case 65:
            case 97:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x500000L, active2, 0L);
            case 66:
            case 98:
                return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x4000000L, active2, 0L);
            case 67:
            case 99:
                if ((active0 & 0x40000L) != 0L)
                    return jjStartNfaWithStates_0(2, 18, 43);
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000201L, active2, 0L);
            case 68:
            case 100:
                if ((active0 & 0x2000L) != 0L)
                    return jjStartNfaWithStates_0(2, 13, 43);
                else if ((active0 & 0x100000L) != 0L)
                    return jjStartNfaWithStates_0(2, 20, 43);
                else if ((active1 & 0x10000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 92, 43);
                return jjMoveStringLiteralDfa3_0(active0, 0x4011000000000000L, active1, 0L, active2, 0L);
            case 69:
            case 101:
                return jjMoveStringLiteralDfa3_0(active0, 0x100018340000000L, active1, 0x800L, active2, 0L);
            case 70:
            case 102:
                return jjMoveStringLiteralDfa3_0(active0, 0x400000008000000L, active1, 0x80000L, active2, 0L);
            case 71:
            case 103:
                return jjMoveStringLiteralDfa3_0(active0, 0x20800000000000L, active1, 0L, active2, 0L);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa3_0(active0, 0x800300004000000L, active1, 0x1000002L, active2, 0L);
            case 75:
            case 107:
                return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L, active2, 0L);
            case 76:
            case 108:
                if ((active0 & 0x1000L) != 0L)
                    return jjStartNfaWithStates_0(2, 12, 43);
                else if ((active0 & 0x80000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 43, 43);
                return jjMoveStringLiteralDfa3_0(active0, 0x82c0001000800000L, active1, 0x20000000L, active2, 0L);
            case 77:
            case 109:
                return jjMoveStringLiteralDfa3_0(active0, 0x4000800000000L, active1, 0L, active2, 0L);
            case 78:
            case 110:
                if ((active2 & 0x800L) != 0L)
                    return jjStopAtPos(2, 139);
                return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0x840400L, active2, 0L);
            case 79:
            case 111:
                return jjMoveStringLiteralDfa3_0(active0, 0x400032000000L, active1, 0L, active2, 0L);
            case 80:
            case 112:
                if ((active0 & 0x80000L) != 0L)
                    return jjStartNfaWithStates_0(2, 19, 43);
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L, active2, 0L);
            case 82:
            case 114:
                if ((active0 & 0x20000000000L) != 0L) {
                    jjmatchedKind = 41;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x221000L, active2, 0L);
            case 83:
            case 115:
                if ((active2 & 0x100L) != 0L)
                    return jjStopAtPos(2, 136);
                return jjMoveStringLiteralDfa3_0(active0, 0x2000000480200000L, active1, 0x140L, active2, 0L);
            case 84:
            case 116:
                if ((active0 & 0x10000L) != 0L)
                    return jjStartNfaWithStates_0(2, 16, 43);
                else if ((active0 & 0x20000L) != 0L)
                    return jjStartNfaWithStates_0(2, 17, 43);
                return jjMoveStringLiteralDfa3_0(active0, 0x8002000400000L, active1, 0x801e094L, active2, 0L);
            case 85:
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L, active2, 0L);
            case 86:
            case 118:
                return jjMoveStringLiteralDfa3_0(active0, 0x1000040000000000L, active1, 0L, active2, 0L);
            case 89:
            case 121:
                if ((active0 & 0x4000L) != 0L)
                    return jjStartNfaWithStates_0(2, 14, 43);
                else if ((active0 & 0x8000L) != 0L)
                    return jjStartNfaWithStates_0(2, 15, 43);
                break;
            default:
                break;
        }
        return jjStartNfa_0(1, active0, active1, active2);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
            return jjStartNfa_0(1, old0, old1, old2);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0, active1, 0L);
            return 3;
        }
        switch (curChar) {
            case 65:
            case 97:
                return jjMoveStringLiteralDfa4_0(active0, 0x4100000000000000L, active1, 0x1L);
            case 67:
            case 99:
                if ((active0 & 0x200000L) != 0L)
                    return jjStartNfaWithStates_0(3, 21, 43);
                break;
            case 69:
            case 101:
                if ((active0 & 0x1000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 24, 43);
                else if ((active0 & 0x80000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 31, 43);
                else if ((active0 & 0x400000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 34, 43);
                else if ((active0 & 0x800000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 35, 43);
                return jjMoveStringLiteralDfa4_0(active0, 0x229b000000000000L, active1, 0x80bc280L);
            case 72:
            case 104:
                if ((active0 & 0x2000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 37, 43);
                return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa4_0(active0, 0x1004800000000000L, active1, 0L);
            case 76:
            case 108:
                if ((active0 & 0x800000L) != 0L)
                    return jjStartNfaWithStates_0(3, 23, 43);
                else if ((active0 & 0x1000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 36, 43);
                return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0x4000008L);
            case 77:
            case 109:
                if ((active0 & 0x20000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 29, 43);
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L);
            case 78:
            case 110:
                if ((active0 & 0x4000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 26, 43);
                else if ((active0 & 0x40000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 30, 43);
                else if ((active0 & 0x100000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 32, 43);
                else if ((active0 & 0x200000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 33, 43);
                return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0x800020L);
            case 79:
            case 111:
                if ((active0 & 0x400000L) != 0L)
                    return jjStartNfaWithStates_0(3, 22, 43);
                return jjMoveStringLiteralDfa4_0(active0, 0x240000000000L, active1, 0x1000000L);
            case 80:
            case 112:
                if ((active0 & 0x2000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 25, 43);
                break;
            case 82:
            case 114:
                if ((active1 & 0x800L) != 0L)
                    return jjStartNfaWithStates_0(3, 75, 43);
                return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0x502000L);
            case 83:
            case 115:
                return jjMoveStringLiteralDfa4_0(active0, 0xc00000010000000L, active1, 0x40000L);
            case 84:
            case 116:
                if ((active0 & 0x8000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 27, 43);
                else if ((active1 & 0x100L) != 0L)
                    return jjStartNfaWithStates_0(3, 72, 43);
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1040L);
            case 85:
            case 117:
                return jjMoveStringLiteralDfa4_0(active0, 0x8040400000000000L, active1, 0x20000404L);
            case 87:
            case 119:
                if ((active0 & 0x8000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 39, 43);
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
            case 89:
            case 121:
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2200000L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0, active1, 0L);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(2, old0, old1, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0, active1, 0L);
            return 4;
        }
        switch (curChar) {
            case 65:
            case 97:
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10200aL);
            case 67:
            case 99:
                return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0x2000020L);
            case 69:
            case 101:
                if ((active0 & 0x4000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 38, 43);
                else if ((active0 & 0x10000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 40, 43);
                else if ((active0 & 0x40000000000000L) != 0L) {
                    jjmatchedKind = 54;
                    jjmatchedPos = 4;
                }
                return jjMoveStringLiteralDfa5_0(active0, 0x8400000000000000L, active1, 0x800010L);
            case 71:
            case 103:
                if ((active0 & 0x100000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 44, 43);
                break;
            case 73:
            case 105:
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4221040L);
            case 77:
            case 109:
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000L);
            case 78:
            case 110:
                if ((active0 & 0x200000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 45, 43);
                else if ((active0 & 0x800000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 47, 43);
                return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
            case 80:
            case 112:
                if ((active0 & 0x400000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 46, 43);
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x201L);
            case 82:
            case 114:
                if ((active0 & 0x2000000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 49, 43);
                else if ((active0 & 0x8000000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 51, 43);
                else if ((active0 & 0x10000000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 52, 43);
                else if ((active1 & 0x1000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 88, 43);
                else if ((active1 & 0x8000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 91, 43);
                return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x9c084L);
            case 83:
            case 115:
                if ((active0 & 0x10000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 28, 43);
                else if ((active1 & 0x400L) != 0L)
                    return jjStartNfaWithStates_0(4, 74, 43);
                break;
            case 84:
            case 116:
                if ((active0 & 0x40000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 42, 43);
                else if ((active0 & 0x4000000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 50, 43);
                else if ((active0 & 0x20000000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 53, 43);
                else if ((active1 & 0x400000L) != 0L)
                    return jjStartNfaWithStates_0(4, 86, 43);
                return jjMoveStringLiteralDfa5_0(active0, 0x4980000000000000L, active1, 0x40000L);
            case 88:
            case 120:
                if ((active0 & 0x1000000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 48, 43);
                break;
            default:
                break;
        }
        return jjStartNfa_0(3, active0, active1, 0L);
    }

    private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(3, old0, old1, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0, active1, 0L);
            return 5;
        }
        switch (curChar) {
            case 65:
            case 97:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4024L);
            case 67:
            case 99:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x902008L);
            case 69:
            case 101:
                if ((active0 & 0x80000000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 55, 43);
                else if ((active0 & 0x100000000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 56, 43);
                else if ((active0 & 0x4000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 62, 43);
                else if ((active1 & 0x1L) != 0L)
                    return jjStartNfaWithStates_0(5, 64, 43);
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80010L);
            case 71:
            case 103:
                if ((active0 & 0x1000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 60, 43);
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000L);
            case 76:
            case 108:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000L);
            case 78:
            case 110:
                if ((active1 & 0x20000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 93, 43);
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4200040L);
            case 82:
            case 114:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40002L);
            case 83:
            case 115:
                if ((active0 & 0x800000000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 59, 43);
                else if ((active0 & 0x8000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 63, 43);
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L);
            case 84:
            case 116:
                if ((active0 & 0x200000000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 57, 43);
                else if ((active0 & 0x400000000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 58, 43);
                else if ((active0 & 0x2000000000000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 61, 43);
                else if ((active1 & 0x200L) != 0L)
                    return jjStartNfaWithStates_0(5, 73, 43);
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000L);
            case 86:
            case 118:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000L);
            default:
                break;
        }
        return jjStartNfa_0(4, active0, active1, 0L);
    }

    private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(4, old0, old1, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, 0L, active1, 0L);
            return 6;
        }
        switch (curChar) {
            case 65:
            case 97:
                return jjMoveStringLiteralDfa7_0(active1, 0x58000L);
            case 67:
            case 99:
                return jjMoveStringLiteralDfa7_0(active1, 0x40L);
            case 69:
            case 101:
                if ((active1 & 0x8L) != 0L)
                    return jjStartNfaWithStates_0(6, 67, 43);
                else if ((active1 & 0x2000000L) != 0L)
                    return jjStartNfaWithStates_0(6, 89, 43);
                return jjMoveStringLiteralDfa7_0(active1, 0x80L);
            case 71:
            case 103:
                if ((active1 & 0x200000L) != 0L)
                    return jjStartNfaWithStates_0(6, 85, 43);
                return jjMoveStringLiteralDfa7_0(active1, 0x4000000L);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa7_0(active1, 0x1000L);
            case 76:
            case 108:
                if ((active1 & 0x4L) != 0L)
                    return jjStartNfaWithStates_0(6, 66, 43);
                else if ((active1 & 0x4000L) != 0L)
                    return jjStartNfaWithStates_0(6, 78, 43);
                break;
            case 78:
            case 110:
                if ((active1 & 0x10L) != 0L)
                    return jjStartNfaWithStates_0(6, 68, 43);
                else if ((active1 & 0x20000L) != 0L)
                    return jjStartNfaWithStates_0(6, 81, 43);
                return jjMoveStringLiteralDfa7_0(active1, 0x80000L);
            case 84:
            case 116:
                if ((active1 & 0x2000L) != 0L)
                    return jjStartNfaWithStates_0(6, 77, 43);
                else if ((active1 & 0x800000L) != 0L)
                    return jjStartNfaWithStates_0(6, 87, 43);
                return jjMoveStringLiteralDfa7_0(active1, 0x100020L);
            case 89:
            case 121:
                if ((active1 & 0x2L) != 0L)
                    return jjStartNfaWithStates_0(6, 65, 43);
                break;
            default:
                break;
        }
        return jjStartNfa_0(5, 0L, active1, 0L);
    }

    private int jjMoveStringLiteralDfa7_0(long old1, long active1) {
        if (((active1 &= old1)) == 0L)
            return jjStartNfa_0(5, 0L, old1, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, 0L, active1, 0L);
            return 7;
        }
        switch (curChar) {
            case 67:
            case 99:
                return jjMoveStringLiteralDfa8_0(active1, 0x80080L);
            case 69:
            case 101:
                if ((active1 & 0x20L) != 0L)
                    return jjStartNfaWithStates_0(7, 69, 43);
                return jjMoveStringLiteralDfa8_0(active1, 0x100000L);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa8_0(active1, 0x40000L);
            case 76:
            case 108:
                if ((active1 & 0x10000L) != 0L)
                    return jjStartNfaWithStates_0(7, 80, 43);
                return jjMoveStringLiteralDfa8_0(active1, 0x8000L);
            case 79:
            case 111:
                return jjMoveStringLiteralDfa8_0(active1, 0x1000L);
            case 83:
            case 115:
                if ((active1 & 0x4000000L) != 0L)
                    return jjStartNfaWithStates_0(7, 90, 43);
                break;
            case 84:
            case 116:
                if ((active1 & 0x40L) != 0L)
                    return jjStartNfaWithStates_0(7, 70, 43);
                break;
            default:
                break;
        }
        return jjStartNfa_0(6, 0L, active1, 0L);
    }

    private int jjMoveStringLiteralDfa8_0(long old1, long active1) {
        if (((active1 &= old1)) == 0L)
            return jjStartNfa_0(6, 0L, old1, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, 0L, active1, 0L);
            return 8;
        }
        switch (curChar) {
            case 69:
            case 101:
                return jjMoveStringLiteralDfa9_0(active1, 0x80000L);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa9_0(active1, 0x8000L);
            case 78:
            case 110:
                if ((active1 & 0x1000L) != 0L)
                    return jjStartNfaWithStates_0(8, 76, 43);
                return jjMoveStringLiteralDfa9_0(active1, 0x40000L);
            case 82:
            case 114:
                if ((active1 & 0x100000L) != 0L)
                    return jjStartNfaWithStates_0(8, 84, 43);
                break;
            case 84:
            case 116:
                if ((active1 & 0x80L) != 0L)
                    return jjStartNfaWithStates_0(8, 71, 43);
                break;
            default:
                break;
        }
        return jjStartNfa_0(7, 0L, active1, 0L);
    }

    private int jjMoveStringLiteralDfa9_0(long old1, long active1) {
        if (((active1 &= old1)) == 0L)
            return jjStartNfa_0(7, 0L, old1, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(8, 0L, active1, 0L);
            return 9;
        }
        switch (curChar) {
            case 83:
            case 115:
                if ((active1 & 0x80000L) != 0L)
                    return jjStartNfaWithStates_0(9, 83, 43);
                break;
            case 84:
            case 116:
                if ((active1 & 0x40000L) != 0L)
                    return jjStartNfaWithStates_0(9, 82, 43);
                break;
            case 90:
            case 122:
                return jjMoveStringLiteralDfa10_0(active1, 0x8000L);
            default:
                break;
        }
        return jjStartNfa_0(8, 0L, active1, 0L);
    }

    private int jjMoveStringLiteralDfa10_0(long old1, long active1) {
        if (((active1 &= old1)) == 0L)
            return jjStartNfa_0(8, 0L, old1, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(9, 0L, active1, 0L);
            return 10;
        }
        switch (curChar) {
            case 69:
            case 101:
                return jjMoveStringLiteralDfa11_0(active1, 0x8000L);
            default:
                break;
        }
        return jjStartNfa_0(9, 0L, active1, 0L);
    }

    private int jjMoveStringLiteralDfa11_0(long old1, long active1) {
        if (((active1 &= old1)) == 0L)
            return jjStartNfa_0(9, 0L, old1, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(10, 0L, active1, 0L);
            return 11;
        }
        switch (curChar) {
            case 68:
            case 100:
                if ((active1 & 0x8000L) != 0L)
                    return jjStartNfaWithStates_0(11, 79, 43);
                break;
            default:
                break;
        }
        return jjStartNfa_0(10, 0L, active1, 0L);
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    static final long[] jjbitVec0 = {0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL,
            0xffffffffffffffffL};
    static final long[] jjbitVec2 = {0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL};
    static final long[] jjbitVec3 = {0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L};
    static final long[] jjbitVec4 = {0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL};
    static final long[] jjbitVec5 = {0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL};
    static final long[] jjbitVec6 = {0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L};
    static final long[] jjbitVec7 = {0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L};
    static final long[] jjbitVec8 = {0x3fffffffffffL, 0x0L, 0x0L, 0x0L};

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 43;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 7:
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 95)
                                    kind = 95;
                                {
                                    jjCheckNAddStates(0, 6);
                                }
                            } else if (curChar == 34) {
                                jjCheckNAddTwoStates(23, 24);
                            } else if (curChar == 39) {
                                jjCheckNAddTwoStates(18, 19);
                            } else if (curChar == 36) {
                                if (kind > 99)
                                    kind = 99;
                                {
                                    jjCheckNAddTwoStates(15, 16);
                                }
                            } else if (curChar == 47)
                                jjstateSet[jjnewStateCnt++] = 8;
                            else if (curChar == 45)
                                jjstateSet[jjnewStateCnt++] = 5;
                            else if (curChar == 46) {
                                jjCheckNAdd(1);
                            }
                            break;
                        case 43:
                            if ((0x3ff001000000000L & l) != 0L) {
                                if (kind > 99)
                                    kind = 99;
                                {
                                    jjCheckNAdd(16);
                                }
                            }
                            if (curChar == 36) {
                                if (kind > 99)
                                    kind = 99;
                                {
                                    jjCheckNAddTwoStates(15, 16);
                                }
                            }
                            break;
                        case 0:
                            if (curChar == 46) {
                                jjCheckNAdd(1);
                            }
                            break;
                        case 1:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 94)
                                kind = 94;
                        {
                            jjCheckNAddTwoStates(1, 2);
                        }
                        break;
                        case 3:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(4);
                            }
                            break;
                        case 4:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 94)
                                kind = 94;
                        {
                            jjCheckNAdd(4);
                        }
                        break;
                        case 5:
                            if (curChar != 45)
                                break;
                            if (kind > 97)
                                kind = 97;
                        {
                            jjCheckNAdd(6);
                        }
                        break;
                        case 6:
                            if ((0xffffffffffffdbffL & l) == 0L)
                                break;
                            if (kind > 97)
                                kind = 97;
                        {
                            jjCheckNAdd(6);
                        }
                        break;
                        case 8:
                            if (curChar == 42) {
                                jjCheckNAddTwoStates(9, 10);
                            }
                            break;
                        case 9:
                            if ((0xfffffbffffffffffL & l) != 0L) {
                                jjCheckNAddTwoStates(9, 10);
                            }
                            break;
                        case 10:
                            if (curChar == 42) {
                                jjCheckNAddStates(7, 9);
                            }
                            break;
                        case 11:
                            if ((0xffff7bffffffffffL & l) != 0L) {
                                jjCheckNAddTwoStates(12, 10);
                            }
                            break;
                        case 12:
                            if ((0xfffffbffffffffffL & l) != 0L) {
                                jjCheckNAddTwoStates(12, 10);
                            }
                            break;
                        case 13:
                            if (curChar == 47 && kind > 98)
                                kind = 98;
                            break;
                        case 14:
                            if (curChar == 47)
                                jjstateSet[jjnewStateCnt++] = 8;
                            break;
                        case 15:
                            if (curChar != 36)
                                break;
                            if (kind > 99)
                                kind = 99;
                        {
                            jjCheckNAddTwoStates(15, 16);
                        }
                        break;
                        case 16:
                            if ((0x3ff001000000000L & l) == 0L)
                                break;
                            if (kind > 99)
                                kind = 99;
                        {
                            jjCheckNAdd(16);
                        }
                        break;
                        case 17:
                            if (curChar == 39) {
                                jjCheckNAddTwoStates(18, 19);
                            }
                            break;
                        case 18:
                            if ((0xffffff7fffffffffL & l) != 0L) {
                                jjCheckNAddTwoStates(18, 19);
                            }
                            break;
                        case 19:
                            if (curChar != 39)
                                break;
                            if (kind > 102)
                                kind = 102;
                            jjstateSet[jjnewStateCnt++] = 20;
                            break;
                        case 20:
                            if (curChar == 39) {
                                jjCheckNAddTwoStates(21, 19);
                            }
                            break;
                        case 21:
                            if ((0xffffff7fffffffffL & l) != 0L) {
                                jjCheckNAddTwoStates(21, 19);
                            }
                            break;
                        case 22:
                            if (curChar == 34) {
                                jjCheckNAddTwoStates(23, 24);
                            }
                            break;
                        case 23:
                            if ((0xfffffffbffffdbffL & l) != 0L) {
                                jjCheckNAddTwoStates(23, 24);
                            }
                            break;
                        case 24:
                            if (curChar == 34 && kind > 103)
                                kind = 103;
                            break;
                        case 26:
                            if ((0xffffffffffffdbffL & l) != 0L) {
                                jjAddStates(10, 11);
                            }
                            break;
                        case 29:
                            if ((0xffffffffffffdbffL & l) != 0L) {
                                jjAddStates(12, 13);
                            }
                            break;
                        case 31:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 95)
                                kind = 95;
                        {
                            jjCheckNAddStates(0, 6);
                        }
                        break;
                        case 32:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(32, 0);
                            }
                            break;
                        case 33:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(33, 34);
                            }
                            break;
                        case 34:
                            if (curChar != 46)
                                break;
                            if (kind > 94)
                                kind = 94;
                            jjstateSet[jjnewStateCnt++] = 35;
                            break;
                        case 36:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(37);
                            }
                            break;
                        case 37:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 94)
                                kind = 94;
                        {
                            jjCheckNAdd(37);
                        }
                        break;
                        case 38:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(38, 39);
                            }
                            break;
                        case 40:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(41);
                            }
                            break;
                        case 41:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 94)
                                kind = 94;
                        {
                            jjCheckNAdd(41);
                        }
                        break;
                        case 42:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 95)
                                kind = 95;
                        {
                            jjCheckNAdd(42);
                        }
                        break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 7:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 99)
                                    kind = 99;
                                {
                                    jjCheckNAddTwoStates(15, 16);
                                }
                            } else if (curChar == 91) {
                                jjCheckNAddTwoStates(29, 30);
                            } else if (curChar == 96) {
                                jjCheckNAddTwoStates(26, 27);
                            }
                            break;
                        case 43:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 99)
                                    kind = 99;
                                {
                                    jjCheckNAdd(16);
                                }
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 99)
                                    kind = 99;
                                {
                                    jjCheckNAddTwoStates(15, 16);
                                }
                            }
                            break;
                        case 2:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(14, 15);
                            }
                            break;
                        case 6:
                            if (kind > 97)
                                kind = 97;
                            jjstateSet[jjnewStateCnt++] = 6;
                            break;
                        case 9: {
                            jjCheckNAddTwoStates(9, 10);
                        }
                        break;
                        case 11:
                        case 12: {
                            jjCheckNAddTwoStates(12, 10);
                        }
                        break;
                        case 15:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 99)
                                kind = 99;
                        {
                            jjCheckNAddTwoStates(15, 16);
                        }
                        break;
                        case 16:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 99)
                                kind = 99;
                        {
                            jjCheckNAdd(16);
                        }
                        break;
                        case 18: {
                            jjCheckNAddTwoStates(18, 19);
                        }
                        break;
                        case 21: {
                            jjCheckNAddTwoStates(21, 19);
                        }
                        break;
                        case 23: {
                            jjAddStates(16, 17);
                        }
                        break;
                        case 25:
                            if (curChar == 96) {
                                jjCheckNAddTwoStates(26, 27);
                            }
                            break;
                        case 26:
                            if ((0xfffffffeffffffffL & l) != 0L) {
                                jjCheckNAddTwoStates(26, 27);
                            }
                            break;
                        case 27:
                            if (curChar == 96 && kind > 103)
                                kind = 103;
                            break;
                        case 28:
                            if (curChar == 91) {
                                jjCheckNAddTwoStates(29, 30);
                            }
                            break;
                        case 29:
                            if ((0xffffffffdfffffffL & l) != 0L) {
                                jjCheckNAddTwoStates(29, 30);
                            }
                            break;
                        case 30:
                            if (curChar == 93 && kind > 103)
                                kind = 103;
                            break;
                        case 35:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(18, 19);
                            }
                            break;
                        case 39:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(20, 21);
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 7:
                        case 15:
                            if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 99)
                                kind = 99;
                        {
                            jjCheckNAddTwoStates(15, 16);
                        }
                        break;
                        case 43:
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                                if (kind > 99)
                                    kind = 99;
                                {
                                    jjCheckNAddTwoStates(15, 16);
                                }
                            }
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                                if (kind > 99)
                                    kind = 99;
                                {
                                    jjCheckNAdd(16);
                                }
                            }
                            break;
                        case 6:
                            if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 97)
                                kind = 97;
                            jjstateSet[jjnewStateCnt++] = 6;
                            break;
                        case 9:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAddTwoStates(9, 10);
                            }
                            break;
                        case 11:
                        case 12:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAddTwoStates(12, 10);
                            }
                            break;
                        case 16:
                            if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 99)
                                kind = 99;
                        {
                            jjCheckNAdd(16);
                        }
                        break;
                        case 18:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAddTwoStates(18, 19);
                            }
                            break;
                        case 21:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                jjCheckNAddTwoStates(21, 19);
                            }
                            break;
                        case 23:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                jjAddStates(16, 17);
                            }
                            break;
                        case 26:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                jjAddStates(10, 11);
                            }
                            break;
                        case 29:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                jjAddStates(12, 13);
                            }
                            break;
                        default:
                            if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0)
                                break;
                            else
                                break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 43 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = {32, 0, 33, 34, 38, 39, 42, 10, 11, 13, 26, 27, 29, 30, 3, 4, 23, 24, 36, 37, 40,
            41,};

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec2[i2] & l2) != 0L);
            default:
                if ((jjbitVec0[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec4[i2] & l2) != 0L);
            case 48:
                return ((jjbitVec5[i2] & l2) != 0L);
            case 49:
                return ((jjbitVec6[i2] & l2) != 0L);
            case 51:
                return ((jjbitVec7[i2] & l2) != 0L);
            case 61:
                return ((jjbitVec8[i2] & l2) != 0L);
            default:
                if ((jjbitVec3[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    /**
     * Token literal values.
     */
    public static final String[] jjstrLiteralImages = {"", null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, "\73", "\75", "\54", "\50", "\51", "\56", "\52", "\77", "\50\53\51", "\76", "\74",
            "\76\75", "\74\75", "\74\76", "\41\75", "\100\100", "\176", "\176\52", "\41\176", "\41\176\52", "\174\174",
            "\174", "\46", "\53", "\55", "\57", "\45", "\136", null, "\175", null, null, "\72\72", "\72", null,};

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /**
     * Get the next Token.
     */
    public Token getNextToken() {
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (; ; ) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                jjmatchedPos = -1;
                matchedToken = jjFillToken();
                matchedToken.specialToken = specialToken;
                return matchedToken;
            }

            try {
                input_stream.backup(0);
                while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
                    curChar = input_stream.BeginToken();
            } catch (java.io.IOException e1) {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    matchedToken.specialToken = specialToken;
                    return matchedToken;
                } else {
                    if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        matchedToken = jjFillToken();
                        if (specialToken == null)
                            specialToken = matchedToken;
                        else {
                            matchedToken.specialToken = specialToken;
                            specialToken = (specialToken.next = matchedToken);
                        }
                    }
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    /**
     * Constructor.
     */
    public CCJSqlParserTokenManager(SimpleCharStream stream) {

        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

        input_stream = stream;
    }

    /**
     * Constructor.
     */
    public CCJSqlParserTokenManager(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 43; i-- > 0; )
            jjrounds[i] = 0x80000000;
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState
                    + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    /**
     * Lexer state names.
     */
    public static final String[] lexStateNames = {"DEFAULT",};
    static final long[] jjtoToken = {0xffffffffffffffe1L, 0xfffffec8ffffffffL, 0xfffL,};
    static final long[] jjtoSkip = {0x1eL, 0x600000000L, 0x0L,};
    static final long[] jjtoSpecial = {0x0L, 0x600000000L, 0x0L,};
    protected SimpleCharStream input_stream;

    private final int[] jjrounds = new int[43];
    private final int[] jjstateSet = new int[2 * 43];


    protected char curChar;
}
