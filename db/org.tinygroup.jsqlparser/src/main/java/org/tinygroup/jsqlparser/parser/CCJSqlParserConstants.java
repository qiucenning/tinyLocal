/**
 *  Copyright (c) 1997-2013, tinygroup.org (luo_guo@live.cn).
 *
 *  Licensed under the GPL, Version 3.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.gnu.org/licenses/gpl.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * --------------------------------------------------------------------------
 *  版权 (c) 1997-2013, tinygroup.org (luo_guo@live.cn).
 *
 *  本开源软件遵循 GPL 3.0 协议;
 *  如果您不遵循此协议，则不被允许使用此文件。
 *  你可以从下面的地址获取完整的协议文本
 *
 *       http://www.gnu.org/licenses/gpl.html
 */
/* Generated By:JavaCC: Do not edit this line. CCJSqlParserConstants.java */
/*
 * #%L
 * JSQLParser library
 * %%
 * Copyright (C) 2004 - 2013 JSQLParser
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation, either version 2.1 of the 
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public 
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */


package org.tinygroup.jsqlparser.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CCJSqlParserConstants {

    /**
     * End of File.
     */
    int EOF = 0;
    /**
     * RegularExpression Id.
     */
    int K_AS = 5;
    /**
     * RegularExpression Id.
     */
    int K_BY = 6;
    /**
     * RegularExpression Id.
     */
    int K_DO = 7;
    /**
     * RegularExpression Id.
     */
    int K_IS = 8;
    /**
     * RegularExpression Id.
     */
    int K_IN = 9;
    /**
     * RegularExpression Id.
     */
    int K_OR = 10;
    /**
     * RegularExpression Id.
     */
    int K_ON = 11;
    /**
     * RegularExpression Id.
     */
    int K_ALL = 12;
    /**
     * RegularExpression Id.
     */
    int K_AND = 13;
    /**
     * RegularExpression Id.
     */
    int K_ANY = 14;
    /**
     * RegularExpression Id.
     */
    int K_KEY = 15;
    /**
     * RegularExpression Id.
     */
    int K_NOT = 16;
    /**
     * RegularExpression Id.
     */
    int K_SET = 17;
    /**
     * RegularExpression Id.
     */
    int K_ASC = 18;
    /**
     * RegularExpression Id.
     */
    int K_TOP = 19;
    /**
     * RegularExpression Id.
     */
    int K_END = 20;
    /**
     * RegularExpression Id.
     */
    int K_DESC = 21;
    /**
     * RegularExpression Id.
     */
    int K_INTO = 22;
    /**
     * RegularExpression Id.
     */
    int K_NULL = 23;
    /**
     * RegularExpression Id.
     */
    int K_LIKE = 24;
    /**
     * RegularExpression Id.
     */
    int K_DROP = 25;
    /**
     * RegularExpression Id.
     */
    int K_JOIN = 26;
    /**
     * RegularExpression Id.
     */
    int K_LEFT = 27;
    /**
     * RegularExpression Id.
     */
    int K_CROSS = 28;
    /**
     * RegularExpression Id.
     */
    int K_FROM = 29;
    /**
     * RegularExpression Id.
     */
    int K_OPEN = 30;
    /**
     * RegularExpression Id.
     */
    int K_CASE = 31;
    /**
     * RegularExpression Id.
     */
    int K_WHEN = 32;
    /**
     * RegularExpression Id.
     */
    int K_THEN = 33;
    /**
     * RegularExpression Id.
     */
    int K_ELSE = 34;
    /**
     * RegularExpression Id.
     */
    int K_SOME = 35;
    /**
     * RegularExpression Id.
     */
    int K_FULL = 36;
    /**
     * RegularExpression Id.
     */
    int K_WITH = 37;
    /**
     * RegularExpression Id.
     */
    int K_TABLE = 38;
    /**
     * RegularExpression Id.
     */
    int K_VIEW = 39;
    /**
     * RegularExpression Id.
     */
    int K_WHERE = 40;
    /**
     * RegularExpression Id.
     */
    int K_FOR = 41;
    /**
     * RegularExpression Id.
     */
    int K_PIVOT = 42;
    /**
     * RegularExpression Id.
     */
    int K_XML = 43;
    /**
     * RegularExpression Id.
     */
    int K_USING = 44;
    /**
     * RegularExpression Id.
     */
    int K_UNION = 45;
    /**
     * RegularExpression Id.
     */
    int K_GROUP = 46;
    /**
     * RegularExpression Id.
     */
    int K_BEGIN = 47;
    /**
     * RegularExpression Id.
     */
    int K_INDEX = 48;
    /**
     * RegularExpression Id.
     */
    int K_INNER = 49;
    /**
     * RegularExpression Id.
     */
    int K_LIMIT = 50;
    /**
     * RegularExpression Id.
     */
    int K_OUTER = 51;
    /**
     * RegularExpression Id.
     */
    int K_ORDER = 52;
    /**
     * RegularExpression Id.
     */
    int K_RIGHT = 53;
    /**
     * RegularExpression Id.
     */
    int K_VALUE = 54;
    /**
     * RegularExpression Id.
     */
    int K_DELETE = 55;
    /**
     * RegularExpression Id.
     */
    int K_CREATE = 56;
    /**
     * RegularExpression Id.
     */
    int K_SELECT = 57;
    /**
     * RegularExpression Id.
     */
    int K_OFFSET = 58;
    /**
     * RegularExpression Id.
     */
    int K_EXISTS = 59;
    /**
     * RegularExpression Id.
     */
    int K_HAVING = 60;
    /**
     * RegularExpression Id.
     */
    int K_INSERT = 61;
    /**
     * RegularExpression Id.
     */
    int K_UPDATE = 62;
    /**
     * RegularExpression Id.
     */
    int K_VALUES = 63;
    /**
     * RegularExpression Id.
     */
    int K_ESCAPE = 64;
    /**
     * RegularExpression Id.
     */
    int K_PRIMARY = 65;
    /**
     * RegularExpression Id.
     */
    int K_NATURAL = 66;
    /**
     * RegularExpression Id.
     */
    int K_REPLACE = 67;
    /**
     * RegularExpression Id.
     */
    int K_BETWEEN = 68;
    /**
     * RegularExpression Id.
     */
    int K_TRUNCATE = 69;
    /**
     * RegularExpression Id.
     */
    int K_DISTINCT = 70;
    /**
     * RegularExpression Id.
     */
    int K_INTERSECT = 71;
    /**
     * RegularExpression Id.
     */
    int K_CAST = 72;
    /**
     * RegularExpression Id.
     */
    int K_EXCEPT = 73;
    /**
     * RegularExpression Id.
     */
    int K_MINUS = 74;
    /**
     * RegularExpression Id.
     */
    int K_OVER = 75;
    /**
     * RegularExpression Id.
     */
    int K_PARTITION = 76;
    /**
     * RegularExpression Id.
     */
    int K_EXTRACT = 77;
    /**
     * RegularExpression Id.
     */
    int K_LATERAL = 78;
    /**
     * RegularExpression Id.
     */
    int K_MATERIALIZED = 79;
    /**
     * RegularExpression Id.
     */
    int K_INTERVAL = 80;
    /**
     * RegularExpression Id.
     */
    int K_FOREIGN = 81;
    /**
     * RegularExpression Id.
     */
    int K_CONSTRAINT = 82;
    /**
     * RegularExpression Id.
     */
    int K_REFERENCES = 83;
    /**
     * RegularExpression Id.
     */
    int K_CHARACTER = 84;
    /**
     * RegularExpression Id.
     */
    int K_VARYING = 85;
    /**
     * RegularExpression Id.
     */
    int K_START = 86;
    /**
     * RegularExpression Id.
     */
    int K_CONNECT = 87;
    /**
     * RegularExpression Id.
     */
    int K_PRIOR = 88;
    /**
     * RegularExpression Id.
     */
    int K_NOCYCLE = 89;
    /**
     * RegularExpression Id.
     */
    int K_SIBLINGS = 90;
    /**
     * RegularExpression Id.
     */
    int K_ALTER = 91;
    /**
     * RegularExpression Id.
     */
    int K_ADD = 92;
    /**
     * RegularExpression Id.
     */
    int K_COLUMN = 93;
    /**
     * RegularExpression Id.
     */
    int S_DOUBLE = 94;
    /**
     * RegularExpression Id.
     */
    int S_INTEGER = 95;
    /**
     * RegularExpression Id.
     */
    int DIGIT = 96;
    /**
     * RegularExpression Id.
     */
    int LINE_COMMENT = 97;
    /**
     * RegularExpression Id.
     */
    int MULTI_LINE_COMMENT = 98;
    /**
     * RegularExpression Id.
     */
    int S_IDENTIFIER = 99;
    /**
     * RegularExpression Id.
     */
    int LETTER = 100;
    /**
     * RegularExpression Id.
     */
    int SPECIAL_CHARS = 101;
    /**
     * RegularExpression Id.
     */
    int S_CHAR_LITERAL = 102;
    /**
     * RegularExpression Id.
     */
    int S_QUOTED_IDENTIFIER = 103;
    /**
     * RegularExpression Id.
     */
    int ADDITIONAL_LETTERS = 104;

    /**
     * Lexical state.
     */
    int DEFAULT = 0;

    /**
     * Literal token values.
     */
    String[] tokenImage = {"<EOF>", "\" \"", "\"\\t\"", "\"\\r\"", "\"\\n\"", "\"AS\"", "\"BY\"", "\"DO\"", "\"IS\"",
            "\"IN\"", "\"OR\"", "\"ON\"", "\"ALL\"", "\"AND\"", "\"ANY\"", "\"KEY\"", "\"NOT\"", "\"SET\"", "\"ASC\"",
            "\"TOP\"", "\"END\"", "\"DESC\"", "\"INTO\"", "\"NULL\"", "\"LIKE\"", "\"DROP\"", "\"JOIN\"", "\"LEFT\"",
            "\"CROSS\"", "\"FROM\"", "\"OPEN\"", "\"CASE\"", "\"WHEN\"", "\"THEN\"", "\"ELSE\"", "\"SOME\"", "\"FULL\"",
            "\"WITH\"", "\"TABLE\"", "\"VIEW\"", "\"WHERE\"", "\"FOR\"", "\"PIVOT\"", "\"XML\"", "\"USING\"",
            "\"UNION\"", "\"GROUP\"", "\"BEGIN\"", "\"INDEX\"", "\"INNER\"", "\"LIMIT\"", "\"OUTER\"", "\"ORDER\"",
            "\"RIGHT\"", "\"VALUE\"", "\"DELETE\"", "\"CREATE\"", "\"SELECT\"", "\"OFFSET\"", "\"EXISTS\"",
            "\"HAVING\"", "\"INSERT\"", "\"UPDATE\"", "\"VALUES\"", "\"ESCAPE\"", "\"PRIMARY\"", "\"NATURAL\"",
            "\"REPLACE\"", "\"BETWEEN\"", "\"TRUNCATE\"", "\"DISTINCT\"", "\"INTERSECT\"", "\"CAST\"", "\"EXCEPT\"",
            "\"MINUS\"", "\"OVER\"", "\"PARTITION\"", "\"EXTRACT\"", "\"LATERAL\"", "\"MATERIALIZED\"", "\"INTERVAL\"",
            "\"FOREIGN\"", "\"CONSTRAINT\"", "\"REFERENCES\"", "\"CHARACTER\"", "\"VARYING\"", "\"START\"",
            "\"CONNECT\"", "\"PRIOR\"", "\"NOCYCLE\"", "\"SIBLINGS\"", "\"ALTER\"", "\"ADD\"", "\"COLUMN\"",
            "<S_DOUBLE>", "<S_INTEGER>", "<DIGIT>", "<LINE_COMMENT>", "<MULTI_LINE_COMMENT>", "<S_IDENTIFIER>",
            "<LETTER>", "<SPECIAL_CHARS>", "<S_CHAR_LITERAL>", "<S_QUOTED_IDENTIFIER>", "<ADDITIONAL_LETTERS>", "\";\"",
            "\"=\"", "\",\"", "\"(\"", "\")\"", "\".\"", "\"*\"", "\"?\"", "\"(+)\"", "\">\"", "\"<\"", "\">=\"",
            "\"<=\"", "\"<>\"", "\"!=\"", "\"@@\"", "\"~\"", "\"~*\"", "\"!~\"", "\"!~*\"", "\"||\"", "\"|\"", "\"&\"",
            "\"+\"", "\"-\"", "\"/\"", "\"%\"", "\"^\"", "\"{d\"", "\"}\"", "\"{t\"", "\"{ts\"", "\"::\"", "\":\"",
            "\"{fn\"",};

}
