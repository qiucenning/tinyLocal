package org.tinygroup.jdbctemplatedslsession.template;

import java.io.Serializable;
import java.util.List;

import org.tinygroup.jdbctemplatedslsession.callback.DeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.InsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamDeleteGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamInsertGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.NoParamUpdateGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.SelectGenerateCallback;
import org.tinygroup.jdbctemplatedslsession.callback.UpdateGenerateCallback;
import org.tinygroup.tinysqldsl.DslSession;
import org.tinygroup.tinysqldsl.Pager;

/**
 * dsl操作模板类
 * @author renhui
 *
 * @param <T>
 */
public interface DslTemplate {

	public DslSession getDslSession();

	public void setDslSession(DslSession dslSession);
    /**
     * 插入记录，主键值需要自己传人
     * @param t
     * @param callback
     * @return
     */
	public <T> T insertObject(T t, InsertGenerateCallback<T> callback);
    /**
     * 插入记录操作，主键值可以自动生成
     * @param autoGeneratedKeys
     * @param t
     * @param callback
     * @return
     */
	public <T> T insertObjectAndReturnKey(boolean autoGeneratedKeys, T t,
			InsertGenerateCallback<T> callback);

	/**
	 * 更新操作
	 * @param t
	 * @param callback
	 * @return
	 */
	public <T> int updateObject(T t, UpdateGenerateCallback<T> callback);

	/**
	 * 根据主键删除记录
	 * @param pk
	 * @param callback
	 * @return
	 */
	public int deleteObject(Serializable pk, DeleteGenerateCallback<Serializable> callback);

	/**
	 * 根据主键查询记录
	 * @param pk
	 * @param callback
	 * @return
	 */
	public <T> T getObjectById(Serializable pk, Class<T> requiredType, SelectGenerateCallback<Serializable> callback);

	/**
	 * 根据主键数组删除记录
	 * @param callback
	 * @param pks
	 * @return
	 */
	public int deleteObjects(DeleteGenerateCallback<Serializable[]> callback,
			Serializable... pks);
    /**
     * 查询操作
     * @param t
     * @param callback
     * @return
     */
	public <T> List<T> queryObjects(T t, SelectGenerateCallback<T> callback);
    /**
     * 分页查询
     * @param start
     * @param limit
     * @param t
     * @param callback
     * @return
     */
	public <T> Pager<T> queryObjectsForPage(int start, int limit, T t,boolean isCursor,
			SelectGenerateCallback<T> callback);

	/**
	 * 批量新增，主键值需要设置到参数对象中
	 * @param objs
	 * @param callback
	 * @return
	 */
	public <T> int[] batchInsert(List<T> objs, NoParamInsertGenerateCallback callback);

	/**
	 * 批量新增，主键值由框架生成
	 * @param autoGeneratedKeys
	 * @param objs
	 * @param callback
	 * @return
	 */
	public <T> int[] batchInsert(boolean autoGeneratedKeys, List<T> objs,
			NoParamInsertGenerateCallback callback);
    /**
     * 批量更改
     * @param objs
     * @param callback
     * @return
     */
	public <T> int[] batchUpdate(List<T> objs, NoParamUpdateGenerateCallback callback);

	/**
	 * 批量删除
	 * @param objs
	 * @param callback
	 * @return
	 */
	public <T> int[] batchDelete(List<T> objs, NoParamDeleteGenerateCallback callback);

}
