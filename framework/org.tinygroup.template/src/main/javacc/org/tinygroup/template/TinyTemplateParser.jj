options{
    STATIC=false;
    LOOKAHEAD=2;
}

PARSER_BEGIN(TinyTemplateParser)
package org.tinygroup.template;
public class TinyTemplateParser {

}

PARSER_END(TinyTemplateParser)

//SKIP==================================
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <SINGLE_LINE_COMMENT: "##" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
| < MULTI_LINE_COMMENTS: "#*" (~["*"])* "*" ("*" | (~["*","#"] (~["*"])* "*"))* "#">
}
//SKIP==================================


TOKEN :
{
 < NO_PARSE: "#[[" (~[])* "]]#">
| <ATTRIBUTE: "." <IDENTIFIER> >
| <VARIABLE : "${" <IDENTIFIER> "}" | "$" <IDENTIFIER>>
| <TEXT: (~["$", "#", "\\"] | <ESCAPE_DIRECTIVE> | (["#","$"]) ([" ","\t","\n","\r"])+)+ >
| <DIRECTIVE : "#" ("@")? ("{")? <IDENTIFIER> ("{")?>
}

TOKEN :
{
    <DOUBLE_ESCAPE : "\\\\">
|   <ESCAPE: "\\" >
|   <ESCAPE_DIRECTIVE :  (<DOUBLE_ESCAPE>)* "\\#" >
}

TOKEN : {
 <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])? | <HEX_LITERAL> (["l","L"])? | <OCTAL_LITERAL> (["l","L"])?>
|  <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
|  <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
|  <#OCTAL_LITERAL: "0" (["0"-"7"])*>
|  <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
|  <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
|  <CHARACTER_LITERAL: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
|  <DOUBLE_STRING_LITERAL: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">
|  <SINGLE_STRING_LITERAL: "'" ( ~["'","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","'"] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "'">
}

TOKEN : {
 <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
|  <#LETTER: ["$","A"-"Z","_","a"-"z"]>
|  <#DIGIT: ["0"-"9"]>
}
/*
TOKEN : {
	<CONTINUE: "continue"> |
	<RETURN: "return"> |
	<WHILE: "while"> |
	<BREAK: "break"> |
	<ELSE: "else"> |
	<FOR: "for"> |
	<IF: "if"> |
	<DO: "do">
}

*/

/** Root production. */
void parse() :
{ }
{
  parseSingle() <EOF>

}

void parseSingle() :{ }
{
(
  parseNO_PARSE()
|  parseDIRECTIVE()
|  parseLongVariable()
|  parseTEXT()
|  parseSingleQuoteString()
|  parseDoubleQuoteString()
)
{}
[parseSingle()]
}


void parseNO_PARSE() :
{Token token; }
{
token=<NO_PARSE>
{
    System.out.println(token.toString());
}
}




void parseDIRECTIVE() :{ Token token; }
{
  token=<DIRECTIVE>
  {
  System.out.println(token.toString());
  }

}

void parseTEXT() :{ Token token; }
{
  token=<TEXT>
  {
  System.out.println(token.toString());
  }
}


void parseSingleQuoteString() :{ Token token; }
{
  token=<SINGLE_STRING_LITERAL>
  {
  System.out.println(token.toString());
  }
}

void parseDoubleQuoteString() :{ Token token; }
{
  token=<DOUBLE_STRING_LITERAL>
  {
  System.out.println(token.toString());
  }
}

void parseVARIABLE() :{ Token token; }
{
  token=<VARIABLE>
  {
  System.out.println(token.toString());
  }
}

void parseLongVariable() :{ Token token; }
{
  token=<VARIABLE> ("." <VARIABLE>|<IDENTIFIER>)*
  {
  System.out.println(token.toString());
  }
}


